name: publish
on:
  push:
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+\-beta'
    - '[0-9]+.[0-9]+.[0-9]+\-beta\.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+\-alpha'
    - '[0-9]+.[0-9]+.[0-9]+\-alpha\.[0-9]+'

env:
  PACT_VERSION: ${{ github.ref_name }}
  PACT_BROKER_BASE_URL: ${{ vars.PACT_BROKER_BASE_URL }}
  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
  GIT_TAG: ${{ github.ref_name }}

jobs:
  get-tags:
    runs-on: ubuntu-22.04
    outputs:
      previous-tag: ${{ steps.get-tags.outputs.previous-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get tags
        id: get-tags
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const {
                data: [previous],
              } = await github.rest.repos.listReleases({
                ...context.repo,
                per_page: 1,
                page: 1,
              });
              core.setOutput("previous-tag", previous.tag_name.replace(/^v/, ''));
            } catch (error) {
              core.setFailed("Failed to get previous release tag: " + error.message);
            }

  generate-release-notes-pr:
    runs-on: ubuntu-22.04
    needs: [get-tags]
    if: github.ref_type != 'branch'
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Generate Release Notes PR
      env:
        GIT_PREV_TAG: ${{ needs.get-tags.outputs.previous-tag }}
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        curl -H "Authorization: token $GH_PAT" \
          -H 'Accept: application/json' \
          -d "{\"event_type\": \"replicated-sdk-release-notes\", \"client_payload\": {\"version\": \"${GIT_TAG}\", \"prev_version\": \"${GIT_PREV_TAG}\" }}" \
          "https://api.github.com/repos/replicatedhq/replicated-docs/dispatches"

  staging:
    runs-on:
      labels: ReplicatedSDK
    outputs:
      digest: ${{ steps.dagger-publish.outputs.stdout }}
    steps:
      - uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - uses: dagger/dagger-for-github@v8.2.0
        id: dagger-publish
        env:
          OP_SERVICE_ACCOUNT: ${{ secrets.OP_SERVICE_ACCOUNT }}
          OP_SERVICE_ACCOUNT_PRODUCTION: ${{ secrets.OP_SERVICE_ACCOUNT_PRODUCTION }}
        with:
          version: "0.18.14"
          verb: call
          args: publish --progress=plain --op-service-account=env:OP_SERVICE_ACCOUNT --op-service-account-production=env:OP_SERVICE_ACCOUNT_PRODUCTION --dev=false --staging=true --version ${{ github.ref_name }}
          cloud-token: ${{ secrets.DAGGER_CLOUD_TOKEN }}

  production:
    runs-on:
      labels: ReplicatedSDK
    outputs:
      digest: ${{ steps.dagger-publish.outputs.stdout }}
    steps:
      - uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - uses: dagger/dagger-for-github@v8.2.0
        id: dagger-publish
        env:
          OP_SERVICE_ACCOUNT: ${{ secrets.OP_SERVICE_ACCOUNT }}
          OP_SERVICE_ACCOUNT_PRODUCTION: ${{ secrets.OP_SERVICE_ACCOUNT_PRODUCTION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: "0.18.14"
          verb: call
          args: publish --progress=plain --op-service-account=env:OP_SERVICE_ACCOUNT --op-service-account-production=env:OP_SERVICE_ACCOUNT_PRODUCTION --dev=false --production=true --version ${{ github.ref_name }} --github-token=env:GITHUB_TOKEN --slsa=true
          cloud-token: ${{ secrets.DAGGER_CLOUD_TOKEN }}
