name: publish
on:
  push:
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+\-beta'
    - '[0-9]+.[0-9]+.[0-9]+\-beta\.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+\-alpha'
    - '[0-9]+.[0-9]+.[0-9]+\-alpha\.[0-9]+'

env:
  PACT_VERSION: ${{ github.ref_name }}
  PACT_BROKER_BASE_URL: ${{ vars.PACT_BROKER_BASE_URL }}
  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
  GIT_TAG: ${{ github.ref_name }}

jobs:
  get-tags:
    runs-on: ubuntu-22.04
    outputs:
      previous-tag: ${{ steps.get-tags.outputs.previous-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get tags
        id: get-tags
        uses: actions/github-script@v7
        with:
          script: |
            const {
              data: [previous],
            } = await github.rest.repos.listReleases({
              ...context.repo,
              per_page: 1,
              page: 1,
            });
            core.setOutput("previous-tag", previous.tag_name.replace(/^v/, ''));

  generate-release-notes-pr:
    runs-on: ubuntu-22.04
    needs: [get-tags]
    if: github.ref_type != 'branch'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Generate Release Notes PR
      env:
        GIT_PREV_TAG: ${{ needs.get-tags.outputs.previous-tag }}
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        curl -H "Authorization: token $GH_PAT" \
          -H 'Accept: application/json' \
          -d "{\"event_type\": \"replicated-sdk-release-notes\", \"client_payload\": {\"version\": \"${GIT_TAG}\", \"prev_version\": \"${GIT_PREV_TAG}\" }}" \
          "https://api.github.com/repos/replicatedhq/replicated-docs/dispatches"

  make-tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.23'
      - uses: replicatedhq/action-install-pact@v1
      - run: make test
      - run: make publish-pact

  make-build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.23'
      - run: make build
      - run: gh release create ${{ github.ref_name }} --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package-and-publish-staging:
    runs-on: 'ubuntu-22.04'
    needs:
      - get-tags
      - make-tests
      - make-build
    outputs:
      digest: ${{ steps.trim-and-save-digest.outputs.digest }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - uses: replicatedhq/action-install-pact@v1

    - name: Pact can-i-deploy
      run: |
        make can-i-deploy || echo "::warning:: can-i-deploy says no; provider(s) must successfully verify before release"

    # Push to DockerHub
    - uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - uses: ./.github/actions/build-push-action
      id: build-push-action
      with:
        context: deploy
        image-name: index.docker.io/replicated/replicated-sdk:${{ github.ref_name }}
        git-tag: ${{ github.ref_name }}
        registry-username: ${{ secrets.DOCKERHUB_USER }}
        registry-password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: 'Trim and Save Digest'
      id: trim-and-save-digest
      uses: actions/github-script@v7
      with:
       script: |
          const fullDigest = "${{ steps.build-push-action.outputs.digest }}";
          const digest = fullDigest.split('@')[1];
          core.setOutput("digest", digest);

    # Push to staging registry
    - uses: docker/login-action@v3
      with:
        registry: registry.staging.replicated.com
        username: ${{ secrets.REPLICATED_USER_STAGING }}
        password: ${{ secrets.REPLICATED_PASS_STAGING }}

    - uses: ./.github/actions/build-push-action
      id: build-push-action-staging
      with:
        context: deploy
        image-name: registry.staging.replicated.com/library/replicated-sdk:${{ github.ref_name }}
        git-tag: ${{ github.ref_name }}
        registry-username: ${{ secrets.REPLICATED_USER_STAGING }}
        registry-password: ${{ secrets.REPLICATED_PASS_STAGING }}

    - name: Run Package and Publish Staging
      env:
        REPLICATED_TAG: ${{ github.ref_name }}
        REPLICATED_CHART_NAME: replicated
        REPLICATED_CHART_VERSION: ${{ github.ref_name }}
        REPLICATED_USER_STAGING: ${{secrets.REPLICATED_USER_STAGING}}
        REPLICATED_PASS_STAGING: ${{secrets.REPLICATED_PASS_STAGING}}
      run: |
        cd chart
        export CHART_NAME=`helm package . | rev | cut -d/ -f1 | rev`

        echo pushing ${CHART_NAME} to staging
        helm registry login registry.staging.replicated.com --username $REPLICATED_USER_STAGING --password $REPLICATED_PASS_STAGING
        helm push $CHART_NAME oci://registry.staging.replicated.com/library

    - name: Pact record-release
      run: make record-release

  package-and-publish-production:
    runs-on: 'ubuntu-22.04'
    needs:
      - package-and-publish-staging
    outputs:
      digest: ${{ steps.trim-and-save-digest.outputs.digest }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Push to production registry
    - uses: docker/login-action@v3
      with:
        registry: registry.replicated.com
        username: ${{ secrets.REPLICATED_USER_PROD }}
        password: ${{ secrets.REPLICATED_PASS_PROD }}

    - uses: ./.github/actions/build-push-action
      id: build-push-action-prod
      with:
        context: deploy
        image-name: registry.replicated.com/library/replicated-sdk:${{ github.ref_name }}
        git-tag: ${{ github.ref_name }}
        registry-username: ${{ secrets.REPLICATED_USER_PROD }}
        registry-password: ${{ secrets.REPLICATED_PASS_PROD }}

    - name: 'Trim and Save Digest'
      id: trim-and-save-digest
      uses: actions/github-script@v7
      with:
       script: |
          const fullDigest = "${{ steps.build-push-action-prod.outputs.digest }}";
          const digest = fullDigest.split('@')[1];
          core.setOutput("digest", digest);

    - name: Run Package and Publish Production
      env:
        REPLICATED_TAG: ${{ github.ref_name }}
        REPLICATED_CHART_NAME: replicated
        REPLICATED_CHART_VERSION: ${{ github.ref_name }}
        REPLICATED_USER_PROD: ${{secrets.REPLICATED_USER_PROD}}
        REPLICATED_PASS_PROD: ${{secrets.REPLICATED_PASS_PROD}}
      run: |
        cd chart
        export CHART_NAME=`helm package . | rev | cut -d/ -f1 | rev`

        echo pushing ${CHART_NAME} to production
        helm registry login registry.replicated.com --username $REPLICATED_USER_PROD --password $REPLICATED_PASS_PROD
        helm push $CHART_NAME oci://registry.replicated.com/library

  provenance-staging:
    needs:
      - package-and-publish-staging
    permissions:
      actions: read
      id-token: write
      packages: write
    if: success() && needs.package-and-publish-staging.result == 'success'
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: registry.staging.replicated.com/library/replicated-sdk:${{ github.ref_name }}
      digest: ${{ needs.package-and-publish-staging.outputs.digest }}
    secrets:
      registry-password: ${{ secrets.REPLICATED_PASS_STAGING }}
      registry-username: ${{ secrets.REPLICATED_USER_STAGING }}

  provenance-production:
    needs:
      - package-and-publish-production
    permissions:
      actions: read
      id-token: write
      packages: write
    if: success() && needs.package-and-publish-production.result == 'success'
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: registry.replicated.com/library/replicated-sdk:${{ github.ref_name }}
      digest: ${{ needs.package-and-publish-production.outputs.digest }}
    secrets:
      registry-password: ${{ secrets.REPLICATED_PASS_PROD }}
      registry-username: ${{ secrets.REPLICATED_USER_PROD }}

