// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/store/store_interface.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/replicatedhq/kots/kotskinds/apis/kots/v1beta1"
	types "github.com/replicatedhq/replicated-sdk/pkg/appstate/types"
	types0 "github.com/replicatedhq/replicated-sdk/pkg/license/types"
	types1 "github.com/replicatedhq/replicated-sdk/pkg/upstream/types"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetAppID mocks base method.
func (m *MockStore) GetAppID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppID indicates an expected call of GetAppID.
func (mr *MockStoreMockRecorder) GetAppID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppID", reflect.TypeOf((*MockStore)(nil).GetAppID))
}

// GetAppName mocks base method.
func (m *MockStore) GetAppName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppName indicates an expected call of GetAppName.
func (mr *MockStoreMockRecorder) GetAppName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppName", reflect.TypeOf((*MockStore)(nil).GetAppName))
}

// GetAppSlug mocks base method.
func (m *MockStore) GetAppSlug() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSlug")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppSlug indicates an expected call of GetAppSlug.
func (mr *MockStoreMockRecorder) GetAppSlug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSlug", reflect.TypeOf((*MockStore)(nil).GetAppSlug))
}

// GetAppStatus mocks base method.
func (m *MockStore) GetAppStatus() types.AppStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStatus")
	ret0, _ := ret[0].(types.AppStatus)
	return ret0
}

// GetAppStatus indicates an expected call of GetAppStatus.
func (mr *MockStoreMockRecorder) GetAppStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStatus", reflect.TypeOf((*MockStore)(nil).GetAppStatus))
}

// GetChannelID mocks base method.
func (m *MockStore) GetChannelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChannelID indicates an expected call of GetChannelID.
func (mr *MockStoreMockRecorder) GetChannelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelID", reflect.TypeOf((*MockStore)(nil).GetChannelID))
}

// GetChannelName mocks base method.
func (m *MockStore) GetChannelName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChannelName indicates an expected call of GetChannelName.
func (mr *MockStoreMockRecorder) GetChannelName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelName", reflect.TypeOf((*MockStore)(nil).GetChannelName))
}

// GetChannelSequence mocks base method.
func (m *MockStore) GetChannelSequence() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelSequence")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetChannelSequence indicates an expected call of GetChannelSequence.
func (mr *MockStoreMockRecorder) GetChannelSequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelSequence", reflect.TypeOf((*MockStore)(nil).GetChannelSequence))
}

// GetLicense mocks base method.
func (m *MockStore) GetLicense() *v1beta1.License {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicense")
	ret0, _ := ret[0].(*v1beta1.License)
	return ret0
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockStoreMockRecorder) GetLicense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockStore)(nil).GetLicense))
}

// GetLicenseFields mocks base method.
func (m *MockStore) GetLicenseFields() types0.LicenseFields {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseFields")
	ret0, _ := ret[0].(types0.LicenseFields)
	return ret0
}

// GetLicenseFields indicates an expected call of GetLicenseFields.
func (mr *MockStoreMockRecorder) GetLicenseFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseFields", reflect.TypeOf((*MockStore)(nil).GetLicenseFields))
}

// GetNamespace mocks base method.
func (m *MockStore) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockStoreMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockStore)(nil).GetNamespace))
}

// GetReleaseCreatedAt mocks base method.
func (m *MockStore) GetReleaseCreatedAt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseCreatedAt")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReleaseCreatedAt indicates an expected call of GetReleaseCreatedAt.
func (mr *MockStoreMockRecorder) GetReleaseCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseCreatedAt", reflect.TypeOf((*MockStore)(nil).GetReleaseCreatedAt))
}

// GetReleaseNotes mocks base method.
func (m *MockStore) GetReleaseNotes() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseNotes")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReleaseNotes indicates an expected call of GetReleaseNotes.
func (mr *MockStoreMockRecorder) GetReleaseNotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseNotes", reflect.TypeOf((*MockStore)(nil).GetReleaseNotes))
}

// GetReleaseSequence mocks base method.
func (m *MockStore) GetReleaseSequence() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseSequence")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetReleaseSequence indicates an expected call of GetReleaseSequence.
func (mr *MockStoreMockRecorder) GetReleaseSequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseSequence", reflect.TypeOf((*MockStore)(nil).GetReleaseSequence))
}

// GetReplicatedAppEndpoint mocks base method.
func (m *MockStore) GetReplicatedAppEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicatedAppEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReplicatedAppEndpoint indicates an expected call of GetReplicatedAppEndpoint.
func (mr *MockStoreMockRecorder) GetReplicatedAppEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicatedAppEndpoint", reflect.TypeOf((*MockStore)(nil).GetReplicatedAppEndpoint))
}

// GetReplicatedID mocks base method.
func (m *MockStore) GetReplicatedID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicatedID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReplicatedID indicates an expected call of GetReplicatedID.
func (mr *MockStoreMockRecorder) GetReplicatedID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicatedID", reflect.TypeOf((*MockStore)(nil).GetReplicatedID))
}

// GetUpdates mocks base method.
func (m *MockStore) GetUpdates() []types1.ChannelRelease {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdates")
	ret0, _ := ret[0].([]types1.ChannelRelease)
	return ret0
}

// GetUpdates indicates an expected call of GetUpdates.
func (mr *MockStoreMockRecorder) GetUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdates", reflect.TypeOf((*MockStore)(nil).GetUpdates))
}

// GetVersionLabel mocks base method.
func (m *MockStore) GetVersionLabel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersionLabel indicates an expected call of GetVersionLabel.
func (mr *MockStoreMockRecorder) GetVersionLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionLabel", reflect.TypeOf((*MockStore)(nil).GetVersionLabel))
}

// IsDevLicense mocks base method.
func (m *MockStore) IsDevLicense() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDevLicense")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDevLicense indicates an expected call of IsDevLicense.
func (mr *MockStoreMockRecorder) IsDevLicense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDevLicense", reflect.TypeOf((*MockStore)(nil).IsDevLicense))
}

// SetAppStatus mocks base method.
func (m *MockStore) SetAppStatus(status types.AppStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAppStatus", status)
}

// SetAppStatus indicates an expected call of SetAppStatus.
func (mr *MockStoreMockRecorder) SetAppStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppStatus", reflect.TypeOf((*MockStore)(nil).SetAppStatus), status)
}

// SetLicense mocks base method.
func (m *MockStore) SetLicense(license *v1beta1.License) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLicense", license)
}

// SetLicense indicates an expected call of SetLicense.
func (mr *MockStoreMockRecorder) SetLicense(license interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLicense", reflect.TypeOf((*MockStore)(nil).SetLicense), license)
}

// SetLicenseFields mocks base method.
func (m *MockStore) SetLicenseFields(licenseFields types0.LicenseFields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLicenseFields", licenseFields)
}

// SetLicenseFields indicates an expected call of SetLicenseFields.
func (mr *MockStoreMockRecorder) SetLicenseFields(licenseFields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLicenseFields", reflect.TypeOf((*MockStore)(nil).SetLicenseFields), licenseFields)
}

// SetUpdates mocks base method.
func (m *MockStore) SetUpdates(updates []types1.ChannelRelease) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpdates", updates)
}

// SetUpdates indicates an expected call of SetUpdates.
func (mr *MockStoreMockRecorder) SetUpdates(updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdates", reflect.TypeOf((*MockStore)(nil).SetUpdates), updates)
}
