{{ if and (not .Values.serviceAccountName) (not .Values.clusterRole) }}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    {{- include "replicated.labels" . | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations:
    {{- toYaml .Values.commonAnnotations | nindent 4 }}
  {{- end }}
  name: {{ include "replicated.roleName" . }}
  namespace: {{ include "replicated.namespace" . | quote }}
rules:
{{ if not .Values.minimalRBAC }}
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - 'get'
  - 'list'
  - 'watch'
{{ end }}
- apiGroups:
  - ''
  resources:
  - 'secrets'
  verbs:
  - 'create'
- apiGroups:
  - ''
  resources:
  - 'secrets'
  verbs:
  - 'update'
  resourceNames:
  - {{ include "replicated.secretName" . }}
  - replicated-instance-report
  - replicated-custom-app-metrics-report
  - replicated-meta-data
{{ if .Values.tlsCertSecretName }}
- apiGroups:
  - ""
  resources:
  - "secrets"
  verbs:
  - "get"
  resourceNames:
  - {{ .Values.tlsCertSecretName }}
{{ end }}

{{ if .Values.minimalRBAC }}
# the SDK deployment, replicaset, and pod are required by default (to determine if there is a newer version running)
- apiGroups:
  - "apps"
  resources:
  - "deployments"
  verbs:
  - "get"
  resourceNames:
  - {{ include "replicated.deploymentName" . }}
- apiGroups:
  - "apps"
  resources:
  - "replicasets"
  verbs:
  - "get"
- apiGroups:
  - ""
  resources:
  - "pods"
  verbs:
  - "get"
# the SDK secret is required by default (to determine if integration test mode is enabled)
- apiGroups:
  - ""
  resources:
  - "secrets"
  verbs:
  - "get"
  resourceNames:
  - {{ include "replicated.secretName" . }}

{{ if eq (include "replicated.statusInformers.hasDeployments" .) "true" }}
- apiGroups:
  - "apps"
  resources:
  - "deployments"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "apps"
  resources:
  - "deployments"
  verbs:
  - "get"
  resourceNames:
  {{ include "replicated.statusInformers.deployments" . | nindent 4 }}
{{ end }}

{{ if eq (include "replicated.statusInformers.hasStatefulsets" .) "true" }}
- apiGroups:
  - "apps"
  resources:
  - "statefulsets"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "apps"
  resources:
  - "statefulsets"
  verbs:
  - "get"
  resourceNames:
  {{ include "replicated.statusInformers.statefulsets" . | nindent 4 }}
- apiGroups:
  - ""
  resources:
  - "pods"
  verbs:
  - "list"
{{ end }}

{{ if eq (include "replicated.statusInformers.hasServices" .) "true" }}
- apiGroups:
  - ""
  resources:
  - "services"
  - "endpoints"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  resources:
  - "services"
  - "endpoints"
  verbs:
  - "get"
  resourceNames:
  {{ include "replicated.statusInformers.services" . | nindent 4 }}
{{ end }}

{{ if eq (include "replicated.statusInformers.hasIngresses" .) "true" }}
- apiGroups:
  - "networking.k8s.io"
  resources:
  - "ingresses"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "networking.k8s.io"
  resources:
  - "ingresses"
  verbs:
  - "get"
  resourceNames:
  {{ include "replicated.statusInformers.ingresses" . | nindent 4 }}
- apiGroups:
  - ""
  resources:
  - "services"
  - "endpoints"
  verbs:
  - "get"
  - "watch"
{{ end }}

{{ if eq (include "replicated.statusInformers.hasPvcs" .) "true" }}
- apiGroups:
  - ""
  resources:
  - "persistentvolumeclaims"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  resources:
  - "persistentvolumeclaims"
  verbs:
  - "get"
  resourceNames:
  {{ include "replicated.statusInformers.pvcs" . | nindent 4 }}
{{ end }}

{{ if eq (include "replicated.statusInformers.hasDaemonsets" .) "true" }}
- apiGroups:
  - "apps"
  resources:
  - "daemonsets"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "apps"
  resources:
  - "daemonsets"
  verbs:
  - "get"
  resourceNames:
  {{ include "replicated.statusInformers.daemonsets" . | nindent 4 }}
- apiGroups:
  - ""
  resources:
  - "pods"
  verbs:
  - "list"
{{ end }}

{{ end }}
{{ end }}
