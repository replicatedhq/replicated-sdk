name: 'Validate Replicated API Endpoints'
description: 'Composite action for validating the replicated API endpoints'
inputs:
  license-id:
    description: 'License ID to use for validation'
    required: true
  license-fields:
    description: 'License fields to validate'
    required: false
    default: '[]'
  integration-enabled:
    description: 'If integration mode is enabled or not'
    required: false
    default: 'false'
  deployed-via-kubectl:
    description: 'If the chart was deployed via kubectl after running helm template'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Install jq
      uses: dcarbone/install-jq-action@v1.0.1

    - name: Port forward to replicated service
      shell: bash
      run: |
        kill -9 $(sudo lsof -t -i:8888) 2>/dev/null || true
        kubectl port-forward svc/replicated 8888:3000 &
        sleep 5

    - name: Validate integration status
      shell: bash
      run: |
        integrationEnabled=$(curl -s --fail --show-error localhost:8888/api/v1/integration/status | jq -r .isEnabled | tr -d '\n')

        if [ "$integrationEnabled" != "${{ inputs.integration-enabled }}" ]; then
          if [ "${{ inputs.integration-enabled }}" == "true" ]; then
            echo "Expected integration mode to be enabled, but it was not."
          else
            echo "Expected integration mode to be disabled, but it was not."
          fi
          exit 1
        fi

    - name: Validate /license/info endpoint
      shell: bash
      run: |
        licenseID=$(curl -s --fail --show-error localhost:8888/api/v1/license/info | jq -r .licenseID | tr -d '\n')

        if [ "$licenseID" != "${{ inputs.license-id }}" ]; then
          echo "License IDs do not match."
          exit 1
        fi

    - name: Validate /license/fields endpoint
      shell: bash
      run: |
        licenseFields=$(curl -s --fail --show-error localhost:8888/api/v1/license/fields)

        for row in $(echo '${{ inputs.license-fields }}' | jq -r '.[] | @base64'); do
          wantName=$(echo $row | base64 --decode | jq -r '.name')
          wantValue=$(echo $row | base64 --decode | jq -r '.value')

          actualValue=$(echo $licenseFields | jq -r .$wantName.value | tr -d '\n')
          if [ "$actualValue" != "$wantValue" ]; then
            echo "Expected license field '$wantName' to be '$wantValue', but is '$actualValue'."
            exit 1
          fi
        done

    - name: Validate /license/field endpoint
      shell: bash
      run: |
        for row in $(echo '${{ inputs.license-fields }}' | jq -r '.[] | @base64'); do
          wantName=$(echo $row | base64 --decode | jq -r '.name')
          wantValue=$(echo $row | base64 --decode | jq -r '.value')

          licenseField=$(curl -s --fail --show-error localhost:8888/api/v1/license/fields/$wantName)

          actualValue=$(echo $licenseField | jq -r .value | tr -d '\n')
          if [ "$actualValue" != "$wantValue" ]; then
            echo "Expected license field '$wantName' to be '$wantValue', but is '$actualValue'."
            exit 1
          fi
        done

    - name: Validate /app/info endpoint
      shell: bash
      run: |
        appStatus=$(curl -s --fail --show-error localhost:8888/api/v1/app/info | jq -r .appStatus | tr -d '\n')

        if [ "$appStatus" != "ready" ]; then
          echo "Expected app status to be 'ready', but is set to '$appStatus'."
          exit 1
        fi

    - name: Validate /app/updates endpoint
      shell: bash
      run: |
        updatesLength=$(curl -s --fail --show-error localhost:8888/api/v1/app/updates | jq '. | length' | tr -d '\n')

        if [ "${{ inputs.integration-enabled }}" == "true" ]; then
          if [ $updatesLength -lt 1 ]; then
            echo "Expected app updates to be greater than 0 in integration mode, but is '$updatesLength'."
            exit 1
          fi
        else
          if [ $updatesLength -ne 0 ]; then
            echo "Expected app updates to be 0 in production mode, but is '$updatesLength'."
            exit 1
          fi
        fi

    - name: Validate /app/history endpoint
      shell: bash
      run: |
        historyLength=$(curl -s --fail --show-error localhost:8888/api/v1/app/history | jq '.releases | length' | tr -d '\n')

        if [ "${{ inputs.deployed-via-kubectl }}" == "true" ] && [ "${{ inputs.integration-enabled }}" == "false" ]; then
          if [ $historyLength -ne 0 ]; then
            echo "Expected app history to be 0 when deployed via kubectl and integration is disabled, but is '$historyLength'."
            exit 1
          fi
        else
          if [ $historyLength -lt 1 ]; then
            echo "No app history found."
            exit 1
          fi
        fi
